{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResponderTouchHistoryStore = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _ResponderEventTypes = require(\"./ResponderEventTypes\");\nvar __DEV__ = process.env.NODE_ENV !== 'production';\nvar MAX_TOUCH_BANK = 20;\nfunction timestampForTouch(touch) {\n  return touch.timeStamp || touch.timestamp;\n}\nfunction createTouchRecord(touch) {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\nfunction resetTouchRecord(touchRecord, touch) {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\nfunction getTouchIdentifier(_ref) {\n  var identifier = _ref.identifier;\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error('Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);\n    }\n  }\n  return identifier;\n}\nfunction recordTouchStart(touch, touchHistory) {\n  var identifier = getTouchIdentifier(touch);\n  var touchRecord = touchHistory.touchBank[identifier];\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchHistory.touchBank[identifier] = createTouchRecord(touch);\n  }\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\nfunction recordTouchMove(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch move without a touch start.\\n', \"Touch Move: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\nfunction recordTouchEnd(touch, touchHistory) {\n  var touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn('Cannot record touch end without a touch start.\\n', \"Touch End: \" + printTouch(touch) + \"\\n\", \"Touch Bank: \" + printTouchBank(touchHistory));\n  }\n}\nfunction printTouch(touch) {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\nfunction printTouchBank(touchHistory) {\n  var touchBank = touchHistory.touchBank;\n  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n  return printed;\n}\nvar ResponderTouchHistoryStore = function () {\n  function ResponderTouchHistoryStore() {\n    (0, _classCallCheck2.default)(this, ResponderTouchHistoryStore);\n    this._touchHistory = {\n      touchBank: [],\n      numberActiveTouches: 0,\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n  }\n  (0, _createClass2.default)(ResponderTouchHistoryStore, [{\n    key: \"recordTouchTrack\",\n    value: function recordTouchTrack(topLevelType, nativeEvent) {\n      var touchHistory = this._touchHistory;\n      if ((0, _ResponderEventTypes.isMoveish)(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchMove(touch, touchHistory);\n        });\n      } else if ((0, _ResponderEventTypes.isStartish)(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchStart(touch, touchHistory);\n        });\n        touchHistory.numberActiveTouches = nativeEvent.touches.length;\n        if (touchHistory.numberActiveTouches === 1) {\n          touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n        }\n      } else if ((0, _ResponderEventTypes.isEndish)(topLevelType)) {\n        nativeEvent.changedTouches.forEach(function (touch) {\n          return recordTouchEnd(touch, touchHistory);\n        });\n        touchHistory.numberActiveTouches = nativeEvent.touches.length;\n        if (touchHistory.numberActiveTouches === 1) {\n          var touchBank = touchHistory.touchBank;\n          for (var i = 0; i < touchBank.length; i++) {\n            var touchTrackToCheck = touchBank[i];\n            if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n              touchHistory.indexOfSingleActiveTouch = i;\n              break;\n            }\n          }\n          if (__DEV__) {\n            var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n            if (!(activeRecord != null && activeRecord.touchActive)) {\n              console.error('Cannot find single active touch.');\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"touchHistory\",\n    get: function get() {\n      return this._touchHistory;\n    }\n  }]);\n  return ResponderTouchHistoryStore;\n}();\nexports.ResponderTouchHistoryStore = ResponderTouchHistoryStore;","map":{"version":3,"names":["_ResponderEventTypes","require","__DEV__","process","env","NODE_ENV","MAX_TOUCH_BANK","timestampForTouch","touch","timeStamp","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","_ref","identifier","console","error","recordTouchStart","touchHistory","touchBank","mostRecentTimeStamp","recordTouchMove","warn","printTouch","printTouchBank","recordTouchEnd","JSON","stringify","printed","slice","length","ResponderTouchHistoryStore","_classCallCheck2","default","_touchHistory","numberActiveTouches","indexOfSingleActiveTouch","_createClass2","key","value","recordTouchTrack","topLevelType","nativeEvent","isMoveish","changedTouches","forEach","isStartish","touches","isEndish","i","touchTrackToCheck","activeRecord","get","exports"],"sources":["C:/xampp/htdocs/Kush/whatsapp_facebook_messenger/chat/node_modules/react-native-web/src/modules/useResponderEvents/ResponderTouchHistoryStore.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { Touch, TouchEvent } from './ResponderEventTypes';\nimport { isStartish, isMoveish, isEndish } from './ResponderEventTypes';\n\ntype TouchRecord = {|\n  currentPageX: number,\n  currentPageY: number,\n  currentTimeStamp: number,\n  previousPageX: number,\n  previousPageY: number,\n  previousTimeStamp: number,\n  startPageX: number,\n  startPageY: number,\n  startTimeStamp: number,\n  touchActive: boolean\n|};\n\nexport type TouchHistory = $ReadOnly<{|\n  indexOfSingleActiveTouch: number,\n  mostRecentTimeStamp: number,\n  numberActiveTouches: number,\n  touchBank: Array<TouchRecord>\n|}>;\n\n/**\n * Tracks the position and time of each active touch by `touch.identifier`. We\n * should typically only see IDs in the range of 1-20 because IDs get recycled\n * when touches end and start again.\n */\n\nconst __DEV__ = process.env.NODE_ENV !== 'production';\nconst MAX_TOUCH_BANK = 20;\n\nfunction timestampForTouch(touch: Touch): number {\n  // The legacy internal implementation provides \"timeStamp\", which has been\n  // renamed to \"timestamp\".\n  return (touch: any).timeStamp || touch.timestamp;\n}\n\n/**\n * TODO: Instead of making gestures recompute filtered velocity, we could\n * include a built in velocity computation that can be reused globally.\n */\nfunction createTouchRecord(touch: Touch): TouchRecord {\n  return {\n    touchActive: true,\n    startPageX: touch.pageX,\n    startPageY: touch.pageY,\n    startTimeStamp: timestampForTouch(touch),\n    currentPageX: touch.pageX,\n    currentPageY: touch.pageY,\n    currentTimeStamp: timestampForTouch(touch),\n    previousPageX: touch.pageX,\n    previousPageY: touch.pageY,\n    previousTimeStamp: timestampForTouch(touch)\n  };\n}\n\nfunction resetTouchRecord(touchRecord: TouchRecord, touch: Touch): void {\n  touchRecord.touchActive = true;\n  touchRecord.startPageX = touch.pageX;\n  touchRecord.startPageY = touch.pageY;\n  touchRecord.startTimeStamp = timestampForTouch(touch);\n  touchRecord.currentPageX = touch.pageX;\n  touchRecord.currentPageY = touch.pageY;\n  touchRecord.currentTimeStamp = timestampForTouch(touch);\n  touchRecord.previousPageX = touch.pageX;\n  touchRecord.previousPageY = touch.pageY;\n  touchRecord.previousTimeStamp = timestampForTouch(touch);\n}\n\nfunction getTouchIdentifier({ identifier }: Touch): number {\n  if (identifier == null) {\n    console.error('Touch object is missing identifier.');\n  }\n  if (__DEV__) {\n    if (identifier > MAX_TOUCH_BANK) {\n      console.error(\n        'Touch identifier %s is greater than maximum supported %s which causes ' +\n          'performance issues backfilling array locations for all of the indices.',\n        identifier,\n        MAX_TOUCH_BANK\n      );\n    }\n  }\n  return identifier;\n}\n\nfunction recordTouchStart(touch: Touch, touchHistory): void {\n  const identifier = getTouchIdentifier(touch);\n  const touchRecord = touchHistory.touchBank[identifier];\n  if (touchRecord) {\n    resetTouchRecord(touchRecord, touch);\n  } else {\n    touchHistory.touchBank[identifier] = createTouchRecord(touch);\n  }\n  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n}\n\nfunction recordTouchMove(touch: Touch, touchHistory): void {\n  const touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = true;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn(\n      'Cannot record touch move without a touch start.\\n',\n      `Touch Move: ${printTouch(touch)}\\n`,\n      `Touch Bank: ${printTouchBank(touchHistory)}`\n    );\n  }\n}\n\nfunction recordTouchEnd(touch: Touch, touchHistory): void {\n  const touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];\n  if (touchRecord) {\n    touchRecord.touchActive = false;\n    touchRecord.previousPageX = touchRecord.currentPageX;\n    touchRecord.previousPageY = touchRecord.currentPageY;\n    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n    touchRecord.currentPageX = touch.pageX;\n    touchRecord.currentPageY = touch.pageY;\n    touchRecord.currentTimeStamp = timestampForTouch(touch);\n    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n  } else {\n    console.warn(\n      'Cannot record touch end without a touch start.\\n',\n      `Touch End: ${printTouch(touch)}\\n`,\n      `Touch Bank: ${printTouchBank(touchHistory)}`\n    );\n  }\n}\n\nfunction printTouch(touch: Touch): string {\n  return JSON.stringify({\n    identifier: touch.identifier,\n    pageX: touch.pageX,\n    pageY: touch.pageY,\n    timestamp: timestampForTouch(touch)\n  });\n}\n\nfunction printTouchBank(touchHistory): string {\n  const { touchBank } = touchHistory;\n  let printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n  if (touchBank.length > MAX_TOUCH_BANK) {\n    printed += ' (original size: ' + touchBank.length + ')';\n  }\n  return printed;\n}\n\nexport class ResponderTouchHistoryStore {\n  _touchHistory = {\n    touchBank: [], //Array<TouchRecord>\n    numberActiveTouches: 0,\n    // If there is only one active touch, we remember its location. This prevents\n    // us having to loop through all of the touches all the time in the most\n    // common case.\n    indexOfSingleActiveTouch: -1,\n    mostRecentTimeStamp: 0\n  };\n\n  recordTouchTrack(topLevelType: string, nativeEvent: TouchEvent): void {\n    const touchHistory = this._touchHistory;\n    if (isMoveish(topLevelType)) {\n      nativeEvent.changedTouches.forEach((touch) =>\n        recordTouchMove(touch, touchHistory)\n      );\n    } else if (isStartish(topLevelType)) {\n      nativeEvent.changedTouches.forEach((touch) =>\n        recordTouchStart(touch, touchHistory)\n      );\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        touchHistory.indexOfSingleActiveTouch =\n          nativeEvent.touches[0].identifier;\n      }\n    } else if (isEndish(topLevelType)) {\n      nativeEvent.changedTouches.forEach((touch) =>\n        recordTouchEnd(touch, touchHistory)\n      );\n      touchHistory.numberActiveTouches = nativeEvent.touches.length;\n      if (touchHistory.numberActiveTouches === 1) {\n        const { touchBank } = touchHistory;\n        for (let i = 0; i < touchBank.length; i++) {\n          const touchTrackToCheck = touchBank[i];\n          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n            touchHistory.indexOfSingleActiveTouch = i;\n            break;\n          }\n        }\n        if (__DEV__) {\n          const activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n          if (!(activeRecord != null && activeRecord.touchActive)) {\n            console.error('Cannot find single active touch.');\n          }\n        }\n      }\n    }\n  }\n\n  get touchHistory(): TouchHistory {\n    return this._touchHistory;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}