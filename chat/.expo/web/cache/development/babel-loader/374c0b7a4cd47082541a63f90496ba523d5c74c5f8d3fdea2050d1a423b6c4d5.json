{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ThemeShape = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _propTypes = require(\"prop-types\");\nvar _resolveIncludes = _interopRequireDefault(require(\"./resolveIncludes\"));\nvar _mergeComponentAndThemeStyles = _interopRequireDefault(require(\"./mergeComponentAndThemeStyles\"));\nvar _normalizeStyle = _interopRequireDefault(require(\"./StyleNormalizer/normalizeStyle\"));\nvar THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nvar THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\nvar defaultTheme;\nvar resolveStyle = function resolveStyle(style, baseStyle) {\n  return (0, _normalizeStyle.default)((0, _resolveIncludes.default)(style, baseStyle));\n};\nvar Theme = function () {\n  function Theme(themeStyle) {\n    (0, _classCallCheck2.default)(this, Theme);\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n  (0, _createClass2.default)(Theme, [{\n    key: \"createComponentStyle\",\n    value: function createComponentStyle(componentName, defaultStyle) {\n      if (this[THEME_STYLE_CACHE][componentName]) {\n        return this[THEME_STYLE_CACHE][componentName];\n      }\n      var componentIncludedStyle = resolveStyle(defaultStyle, this[THEME_STYLE]);\n      this[THEME_STYLE_CACHE][componentName] = (0, _mergeComponentAndThemeStyles.default)(componentIncludedStyle, this[THEME_STYLE][componentName], this[THEME_STYLE]);\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n  }], [{\n    key: \"setDefaultThemeStyle\",\n    value: function setDefaultThemeStyle(style) {\n      defaultTheme = new Theme(style);\n    }\n  }, {\n    key: \"getDefaultTheme\",\n    value: function getDefaultTheme() {\n      if (!defaultTheme) {\n        defaultTheme = new Theme({});\n      }\n      return defaultTheme;\n    }\n  }]);\n  return Theme;\n}();\nexports.default = Theme;\nvar ThemeShape = _propTypes.PropTypes.shape({\n  createComponentStyle: _propTypes.PropTypes.func.isRequired\n});\nexports.ThemeShape = ThemeShape;","map":{"version":3,"names":["_propTypes","require","_resolveIncludes","_interopRequireDefault","_mergeComponentAndThemeStyles","_normalizeStyle","THEME_STYLE","THEME_STYLE_CACHE","defaultTheme","resolveStyle","style","baseStyle","normalizeStyle","resolveIncludes","Theme","themeStyle","_classCallCheck2","default","_createClass2","key","value","createComponentStyle","componentName","defaultStyle","componentIncludedStyle","mergeComponentAndThemeStyles","setDefaultThemeStyle","getDefaultTheme","exports","ThemeShape","PropTypes","shape","func","isRequired"],"sources":["C:/xampp/htdocs/Kush/whatsapp_facebook_messenger/chat/node_modules/native-base-shoutem-theme/src/Theme.js"],"sourcesContent":["import { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\n\n// Privates, ideally those should be symbols\nconst THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nconst THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\n\nlet defaultTheme;\n\nconst resolveStyle = (style, baseStyle) =>\n  normalizeStyle(resolveIncludes(style, baseStyle));\n\n/**\n * The theme defines the application style, and provides methods to\n * resolve the style for a specific component.\n *\n * A theme style is a JavaScript object that contains the\n * React Native style rules, with several additional features:\n * 1. Style rules may be nested arbitrarily\n * 2. Top level keys may target specific components by using their fully qualified name\n * 3. INCLUDE keyword may be used to include any top level style key rules in any other style key\n *\n * Top level keys in a theme are usually some shared styles and component styles, e.g.:\n * {\n *   // Shared style\n *   baseFont: {\n *     fontFamily: '...'\n *   },\n *\n *   // Style that will be applied to shoutem.ui.Text component\n *   'shoutem.ui.Text': {\n *     [INCLUDE]: ['baseFont'],\n *     color: 'black'\n *   }\n * }\n */\nexport default class Theme {\n  constructor(themeStyle) {\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n\n  /**\n   * Sets the given style as a default theme style.\n   */\n  static setDefaultThemeStyle(style) {\n    defaultTheme = new Theme(style);\n  }\n\n  /**\n   * Returns the default theme that will be used as fallback\n   * if the StyleProvider is not configured in the app.\n   */\n  static getDefaultTheme() {\n    if (!defaultTheme) {\n      defaultTheme = new Theme({});\n    }\n\n    return defaultTheme;\n  }\n\n  /**\n   * Creates a component style by merging the theme style on top of the\n   * provided default component style. Any rules in the theme style will\n   * override the rules from the base component style.\n   *\n   * This method will also resolve any INCLUDE keywords in the theme or\n   * component styles before returning the final style.\n   *\n   * @param componentName fully qualified component name.\n   * @param defaultStyle - default component style that will be used as base style.\n   */\n  createComponentStyle(componentName, defaultStyle) {\n    if (this[THEME_STYLE_CACHE][componentName]) {\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n\n    const componentIncludedStyle = resolveStyle(\n      defaultStyle,\n      this[THEME_STYLE]\n    );\n\n    /**\n     * This is static component style (static per componentName). This style can only\n     * change if the theme changes during runtime, so it is safe to reuse it within a\n     * scope of a theme once it is resolved for the first time.\n     */\n    this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(\n      componentIncludedStyle,\n      this[THEME_STYLE][componentName],\n      this[THEME_STYLE]\n    );\n\n    return this[THEME_STYLE_CACHE][componentName];\n  }\n}\n\nexport const ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});\n"],"mappings":";;;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,6BAAA,GAAAD,sBAAA,CAAAF,OAAA;AACA,IAAAI,eAAA,GAAAF,sBAAA,CAAAF,OAAA;AAGA,IAAMK,WAAW,GAAG,4BAA4B;AAChD,IAAMC,iBAAiB,GAAG,kCAAkC;AAE5D,IAAIC,YAAY;AAEhB,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAEC,SAAS;EAAA,OACpC,IAAAC,uBAAc,EAAC,IAAAC,wBAAe,EAACH,KAAK,EAAEC,SAAS,CAAC,CAAC;AAAA;AAAC,IA0B/BG,KAAK;EACxB,SAAAA,MAAYC,UAAU,EAAE;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAH,KAAA;IACtB,IAAI,CAACR,WAAW,CAAC,GAAGG,YAAY,CAACM,UAAU,CAAC;IAC5C,IAAI,CAACR,iBAAiB,CAAC,GAAG,CAAC,CAAC;EAC9B;EAAC,IAAAW,aAAA,CAAAD,OAAA,EAAAH,KAAA;IAAAK,GAAA;IAAAC,KAAA,EAgCD,SAAAC,qBAAqBC,aAAa,EAAEC,YAAY,EAAE;MAChD,IAAI,IAAI,CAAChB,iBAAiB,CAAC,CAACe,aAAa,CAAC,EAAE;QAC1C,OAAO,IAAI,CAACf,iBAAiB,CAAC,CAACe,aAAa,CAAC;MAC/C;MAEA,IAAME,sBAAsB,GAAGf,YAAY,CACzCc,YAAY,EACZ,IAAI,CAACjB,WAAW,CAAC,CAClB;MAOD,IAAI,CAACC,iBAAiB,CAAC,CAACe,aAAa,CAAC,GAAG,IAAAG,qCAA4B,EACnED,sBAAsB,EACtB,IAAI,CAAClB,WAAW,CAAC,CAACgB,aAAa,CAAC,EAChC,IAAI,CAAChB,WAAW,CAAC,CAClB;MAED,OAAO,IAAI,CAACC,iBAAiB,CAAC,CAACe,aAAa,CAAC;IAC/C;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAjDD,SAAAM,qBAA4BhB,KAAK,EAAE;MACjCF,YAAY,GAAG,IAAIM,KAAK,CAACJ,KAAK,CAAC;IACjC;EAAC;IAAAS,GAAA;IAAAC,KAAA,EAMD,SAAAO,gBAAA,EAAyB;MACvB,IAAI,CAACnB,YAAY,EAAE;QACjBA,YAAY,GAAG,IAAIM,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9B;MAEA,OAAON,YAAY;IACrB;EAAC;EAAA,OAAAM,KAAA;AAAA;AAAAc,OAAA,CAAAX,OAAA,GAAAH,KAAA;AAsCI,IAAMe,UAAU,GAAGC,oBAAS,CAACC,KAAK,CAAC;EACxCV,oBAAoB,EAAES,oBAAS,CAACE,IAAI,CAACC;AACvC,CAAC,CAAC;AAACL,OAAA,CAAAC,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}