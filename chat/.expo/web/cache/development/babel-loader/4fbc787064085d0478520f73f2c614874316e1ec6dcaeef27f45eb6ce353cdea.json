{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeScreens = require(\"react-native-screens\");\nvar _Screens = require(\"../Screens\");\nvar _HeaderSegment = require(\"../Header/HeaderSegment\");\nvar _CardContainer = _interopRequireDefault(require(\"./CardContainer\"));\nvar _TransitionPresets = require(\"../../TransitionConfigs/TransitionPresets\");\nvar _HeaderStyleInterpolators = require(\"../../TransitionConfigs/HeaderStyleInterpolators\");\nvar _CardStyleInterpolators = require(\"../../TransitionConfigs/CardStyleInterpolators\");\nvar _getDistanceForDirection = _interopRequireDefault(require(\"../../utils/getDistanceForDirection\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n    var style = _reactNative.StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n    var _options$headerStatus = options.headerStatusBarHeight,\n      headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : (0, _HeaderSegment.getDefaultHeaderHeight)(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    _ref2$gestureDirectio = _ref2.gestureDirection,\n    gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? _TransitionPresets.ModalTransition.gestureDirection : _TransitionPresets.DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n  return (0, _getDistanceForDirection.default)(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  (0, _inherits2.default)(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n        height = _ref3.height;\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, (0, _defineProperty3.default)({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getPreviousScene\", function (_ref5) {\n      var route = _ref5.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    var _Dimensions$get = _reactNative.Dimensions.get('window'),\n      _Dimensions$get$heigh = _Dimensions$get.height,\n      _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n      _Dimensions$get$width = _Dimensions$get.width,\n      _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        mode = _this$props.mode,\n        insets = _this$props.insets,\n        descriptors = _this$props.descriptors,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        getGesturesEnabled = _this$props.getGesturesEnabled,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        headerMode = _this$props.headerMode,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onPageChangeStart = _this$props.onPageChangeStart,\n        onPageChangeConfirm = _this$props.onPageChangeConfirm,\n        onPageChangeCancel = _this$props.onPageChangeCancel,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? _reactNative.Platform.OS === 'web' || _Screens.shouldUseActivityState : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var defaultTransitionPreset = mode === 'modal' ? _TransitionPresets.ModalTransition : _TransitionPresets.DefaultTransition;\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: _HeaderStyleInterpolators.forNoAnimation\n        });\n      }\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n        _ref6$top = _ref6.top,\n        top = _ref6$top === void 0 ? insets.top : _ref6$top,\n        _ref6$right = _ref6.right,\n        right = _ref6$right === void 0 ? insets.right : _ref6$right,\n        _ref6$bottom = _ref6.bottom,\n        bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n        _ref6$left = _ref6.left,\n        left = _ref6$left === void 0 ? insets.left : _ref6$left;\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var _scenes$i$descriptor$ = scenes[i].descriptor.options.detachPreviousScreen,\n          detachPreviousScreen = _scenes$i$descriptor$ === void 0 ? mode === 'modal' ? i !== scenes.length - 1 : true : _scenes$i$descriptor$;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n      var isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(function (scene) {\n        var descriptor = scene.descriptor;\n        var options = descriptor ? descriptor.options : {};\n        var headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n        return false;\n      }) : false;\n      var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })) : null;\n      var isScreensEnabled = (_reactNativeScreens.screensEnabled === null || _reactNativeScreens.screensEnabled === void 0 ? void 0 : (0, _reactNativeScreens.screensEnabled)()) && detachInactiveScreens;\n      return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(_Screens.MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (_Screens.shouldUseActivityState || _reactNative.Platform.OS === 'web') {\n          if (index < self.length - activeScreensLimit - 1) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            var sceneForActivity = scenes[self.length - 1];\n            var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n        } else {\n          isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n        }\n        var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n          safeAreaInsets = _ref7.safeAreaInsets,\n          _ref7$headerShown = _ref7.headerShown,\n          headerShown = _ref7$headerShown === void 0 ? true : _ref7$headerShown,\n          headerTransparent = _ref7.headerTransparent,\n          cardShadowEnabled = _ref7.cardShadowEnabled,\n          cardOverlayEnabled = _ref7.cardOverlayEnabled,\n          cardOverlay = _ref7.cardOverlay,\n          cardStyle = _ref7.cardStyle,\n          animationEnabled = _ref7.animationEnabled,\n          gestureResponseDistance = _ref7.gestureResponseDistance,\n          gestureVelocityImpact = _ref7.gestureVelocityImpact,\n          _ref7$gestureDirectio = _ref7.gestureDirection,\n          gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n          _ref7$transitionSpec = _ref7.transitionSpec,\n          transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n          _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n          cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n          _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n          headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n          if (nextScene) {\n            var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n              _animationEnabled = _ref8.animationEnabled,\n              _ref8$gestureDirectio = _ref8.gestureDirection,\n              _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n              _ref8$transitionSpec = _ref8.transitionSpec,\n              _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n              _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n              _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? _CardStyleInterpolators.forNoAnimation : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n              _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n              _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n        var _ref9 = safeAreaInsets || {},\n          _ref9$top = _ref9.top,\n          safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n          _ref9$right = _ref9.right,\n          safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n          _ref9$bottom = _ref9.bottom,\n          safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n          _ref9$left = _ref9.left,\n          safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n        var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(_Screens.MaybeScreen, {\n          key: route.key,\n          style: _reactNative.StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(_CardContainer.default, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref10 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref10.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new _reactNative.Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexports.default = CardStack;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_reactNativeScreens","_Screens","_HeaderSegment","_CardContainer","_interopRequireDefault","_TransitionPresets","_HeaderStyleInterpolators","_CardStyleInterpolators","_getDistanceForDirection","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","_objectSpread","target","i","length","source","forEach","_defineProperty3","getOwnPropertyDescriptors","defineProperties","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","_ref","_ref$options","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","_options$headerStatus","headerStatusBarHeight","top","getDefaultHeaderHeight","getDistanceFromOptions","mode","descriptor","_ref2","_ref2$gestureDirectio","gestureDirection","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_inherits2","_super","_props","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","_e$nativeEvent$layout","nativeEvent","setState","state","props","headerHeights","_ref3","route","_ref4","previousHeight","index","_ref5","getPreviousRoute","scenes","previousRoute","previousScene","find","scene","undefined","_Dimensions$get","Dimensions","_Dimensions$get$heigh","_height","_Dimensions$get$width","_width","gestures","_createClass2","value","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","_this$props$detachIna","detachInactiveScreens","Platform","OS","shouldUseActivityState","_this$state","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","forNoAnimationHeader","_ref6","_ref6$top","_ref6$right","right","_ref6$bottom","bottom","_ref6$left","left","activeScreensLimit","_scenes$i$descriptor$","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","_options$headerShown","headerShown","floatingHeader","createElement","Fragment","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","isScreensEnabled","screensEnabled","MaybeScreenContainer","enabled","container","onLayout","handleLayout","map","self","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","next","_ref7","_ref7$headerShown","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","animationEnabled","gestureResponseDistance","gestureVelocityImpact","_ref7$gestureDirectio","_ref7$transitionSpec","transitionSpec","_ref7$cardStyleInterp","cardStyleInterpolator","forNoAnimationCard","_ref7$headerStyleInte","transitionConfig","nextScene","_ref8","_ref8$gestureDirectio","_ref8$transitionSpec","_ref8$cardStyleInterp","_ref8$headerStyleInte","_ref9","_ref9$top","safeAreaInsetTop","_ref9$right","safeAreaInsetRight","_ref9$bottom","safeAreaInsetBottom","_ref9$left","safeAreaInsetLeft","headerHeight","MaybeScreen","absoluteFill","active","pointerEvents","CardContainer","_extends","closing","includes","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","getDerivedStateFromProps","_ref10","Animated","Value","openingRouteKeys","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","__memo","every","it","Component","exports","create","flex","position","zIndex"],"sources":["C:\\xampp\\htdocs\\Kush\\whatsapp_facebook_messenger\\chat\\node_modules\\@react-navigation\\stack\\lib\\module\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport { screensEnabled } from 'react-native-screens';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}