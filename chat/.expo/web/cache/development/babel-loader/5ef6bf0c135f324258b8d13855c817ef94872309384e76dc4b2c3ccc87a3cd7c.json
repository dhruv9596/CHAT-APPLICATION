{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\nvar _reactNavigation = require(\"react-navigation\");\nvar _GestureHandler = require(\"../GestureHandler\");\nvar _CardStack = _interopRequireDefault(require(\"./CardStack\"));\nvar _KeyboardManager = _interopRequireDefault(require(\"../KeyboardManager\"));\nvar _HeaderContainer = _interopRequireDefault(require(\"../Header/HeaderContainer\"));\nvar _SafeAreaProviderCompat = _interopRequireDefault(require(\"../SafeAreaProviderCompat\"));\nvar _excluded = [\"state\", \"navigation\", \"keyboardHandlingEnabled\", \"mode\", \"headerMode\", \"descriptors\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\nvar StackView = function (_React$Component) {\n  (0, _inherits2.default)(StackView, _React$Component);\n  var _super = _createSuper(StackView);\n  function StackView() {\n    var _this;\n    (0, _classCallCheck2.default)(this, StackView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getGesturesEnabled\", function (_ref) {\n      var route = _ref.route;\n      var descriptor = _this.state.descriptors[route.key];\n      if (descriptor) {\n        var _descriptor$options3 = descriptor.options,\n          gestureEnabled = _descriptor$options3.gestureEnabled,\n          animationEnabled = _descriptor$options3.animationEnabled;\n        if (animationEnabled === false) {\n          return false;\n        }\n        return gestureEnabled !== undefined ? gestureEnabled : _reactNative.Platform.OS !== 'android';\n      }\n      return false;\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"getPreviousRoute\", function (_ref2) {\n      var route = _ref2.route;\n      var _this$state = _this.state,\n        closingRouteKeys = _this$state.closingRouteKeys,\n        replacingRouteKeys = _this$state.replacingRouteKeys;\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderScene\", function (_ref3) {\n      var route = _ref3.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      var navigation = descriptor.navigation,\n        getComponent = descriptor.getComponent;\n      var SceneComponent = getComponent();\n      return React.createElement(_reactNavigation.SceneView, {\n        screenProps: _this.props.screenProps,\n        navigation: navigation,\n        component: SceneComponent\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderHeader\", function (props) {\n      return React.createElement(_HeaderContainer.default, props);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleTransitionComplete\", function () {\n      var _this$props = _this.props,\n        state = _this$props.state,\n        navigation = _this$props.navigation;\n      if (state.isTransitioning) {\n        navigation.dispatch(_reactNavigation.StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key\n        }));\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleOpenRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n        state = _this$props2.state,\n        navigation = _this$props2.navigation;\n      var _this$state2 = _this.state,\n        closingRouteKeys = _this$state2.closingRouteKeys,\n        replacingRouteKeys = _this$state2.replacingRouteKeys;\n      _this.handleTransitionComplete();\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_reactNavigation.NavigationActions.navigate(route));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleCloseRoute\", function (_ref5) {\n      var route = _ref5.route;\n      var _this$props3 = _this.props,\n        state = _this$props3.state,\n        navigation = _this$props3.navigation;\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_reactNavigation.StackActions.pop({\n          key: route.key,\n          prune: false\n        }));\n      } else {\n        _this.handleTransitionComplete();\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleTransitionStart\", function (_ref6, closing) {\n      var route = _ref6.route;\n      var _descriptor$options$o, _descriptor$options;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o = (_descriptor$options = descriptor.options).onTransitionStart) === null || _descriptor$options$o === void 0 ? void 0 : _descriptor$options$o.call(_descriptor$options, {\n        closing: closing\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleTransitionEnd\", function (_ref7, closing) {\n      var route = _ref7.route;\n      var _descriptor$options$o2, _descriptor$options2;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key] || _this.state.descriptors[route.key];\n      descriptor === null || descriptor === void 0 ? void 0 : (_descriptor$options$o2 = (_descriptor$options2 = descriptor.options).onTransitionEnd) === null || _descriptor$options$o2 === void 0 ? void 0 : _descriptor$options$o2.call(_descriptor$options2, {\n        closing: closing\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureStart\", function () {});\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureEnd\", function () {});\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleGestureCancel\", function () {});\n    return _this;\n  }\n  (0, _createClass2.default)(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        state = _this$props4.state,\n        navigation = _this$props4.navigation,\n        keyboardHandlingEnabled = _this$props4.keyboardHandlingEnabled,\n        _this$props4$mode = _this$props4.mode,\n        mode = _this$props4$mode === void 0 ? 'card' : _this$props4$mode,\n        _this$props4$headerMo = _this$props4.headerMode,\n        headerMode = _this$props4$headerMo === void 0 ? mode === 'card' && _reactNative.Platform.OS === 'ios' ? 'float' : 'screen' : _this$props4$headerMo,\n        _ = _this$props4.descriptors,\n        rest = (0, _objectWithoutProperties2.default)(_this$props4, _excluded);\n      var _this$state3 = this.state,\n        routes = _this$state3.routes,\n        descriptors = _this$state3.descriptors,\n        openingRouteKeys = _this$state3.openingRouteKeys,\n        closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(React.Fragment, null, React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(_SafeAreaProviderCompat.default, null, React.createElement(_reactNativeSafeAreaContext.SafeAreaConsumer, null, function (insets) {\n        return React.createElement(_KeyboardManager.default, {\n          enabled: keyboardHandlingEnabled !== false\n        }, function (props) {\n          return React.createElement(_CardStack.default, _extends({\n            mode: mode,\n            insets: insets,\n            getPreviousRoute: _this2.getPreviousRoute,\n            getGesturesEnabled: _this2.getGesturesEnabled,\n            routes: routes,\n            openingRouteKeys: openingRouteKeys,\n            closingRouteKeys: closingRouteKeys,\n            onOpenRoute: _this2.handleOpenRoute,\n            onCloseRoute: _this2.handleCloseRoute,\n            onTransitionStart: _this2.handleTransitionStart,\n            onTransitionEnd: _this2.handleTransitionEnd,\n            renderHeader: _this2.renderHeader,\n            renderScene: _this2.renderScene,\n            headerMode: headerMode,\n            state: state,\n            descriptors: descriptors,\n            onGestureStart: _this2.handleGestureStart,\n            onGestureEnd: _this2.handleGestureEnd,\n            onGestureCancel: _this2.handleGestureCancel\n          }, rest, props));\n        });\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n        closingRouteKeys = state.closingRouteKeys,\n        replacingRouteKeys = state.replacingRouteKeys,\n        previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat((0, _toConsumableArray2.default)(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat((0, _toConsumableArray2.default)(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat((0, _toConsumableArray2.default)(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat((0, _toConsumableArray2.default)(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n        routes = routes.slice();\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat((0, _toConsumableArray2.default)(state.routes.filter(function (_ref8) {\n          var key = _ref8.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n  return StackView;\n}(React.Component);\nexports.default = StackView;\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_reactNativeSafeAreaContext","_reactNavigation","_GestureHandler","_CardStack","_interopRequireDefault","_KeyboardManager","_HeaderContainer","_SafeAreaProviderCompat","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","GestureHandlerWrapper","GestureHandlerRootView","View","isArrayEqual","a","b","length","every","it","index","StackView","_React$Component","_inherits2","_super","_this","_classCallCheck2","_len","args","Array","_key","concat","_defineProperty","_assertThisInitialized2","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","_ref","route","descriptor","state","_descriptor$options3","options","gestureEnabled","animationEnabled","undefined","Platform","OS","_ref2","_this$state","filter","r","includes","findIndex","_ref3","props","navigation","getComponent","SceneComponent","createElement","SceneView","screenProps","component","HeaderContainer","_this$props","isTransitioning","dispatch","StackActions","completeTransition","toChildKey","_ref4","_this$props2","_this$state2","handleTransitionComplete","some","NavigationActions","navigate","setState","_ref5","_this$props3","pop","prune","_ref6","closing","_descriptor$options$o","_descriptor$options","onTransitionStart","_ref7","_descriptor$options$o2","_descriptor$options2","onTransitionEnd","_createClass2","value","render","_this2","_this$props4","keyboardHandlingEnabled","_this$props4$mode","mode","_this$props4$headerMo","headerMode","_","rest","_objectWithoutProperties2","_this$state3","Fragment","style","styles","container","SafeAreaProviderCompat","SafeAreaConsumer","insets","KeyboardManager","enabled","CardStack","_extends","getPreviousRoute","getGesturesEnabled","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","_descriptor$options$a","animationTypeForReplace","_toConsumableArray2","splice","_routes2","_ref8","Error","Component","exports","StyleSheet","create","flex"],"sources":["C:\\xampp\\htdocs\\Kush\\whatsapp_facebook_messenger\\chat\\node_modules\\react-navigation-stack\\lib\\module\\vendor\\views\\Stack\\StackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  NavigationActions,\n  SceneView,\n} from 'react-navigation';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = () => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    this.handleTransitionComplete();\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.dispatch(NavigationActions.navigate(route));\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      this.handleTransitionComplete();\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  private handleGestureStart = () => {\n    // Do nothing\n  };\n\n  private handleGestureEnd = () => {\n    // Do nothing\n  };\n\n  private handleGestureCancel = () => {\n    // Do nothing\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <CardStack\n                      mode={mode}\n                      insets={insets as EdgeInsets}\n                      getPreviousRoute={this.getPreviousRoute}\n                      getGesturesEnabled={this.getGesturesEnabled}\n                      routes={routes}\n                      openingRouteKeys={openingRouteKeys}\n                      closingRouteKeys={closingRouteKeys}\n                      onOpenRoute={this.handleOpenRoute}\n                      onCloseRoute={this.handleCloseRoute}\n                      onTransitionStart={this.handleTransitionStart}\n                      onTransitionEnd={this.handleTransitionEnd}\n                      renderHeader={this.renderHeader}\n                      renderScene={this.renderScene}\n                      headerMode={headerMode}\n                      state={state}\n                      descriptors={descriptors}\n                      onGestureStart={this.handleGestureStart}\n                      onGestureEnd={this.handleGestureEnd}\n                      onGestureCancel={this.handleGestureCancel}\n                      {...rest}\n                      {...props}\n                    />\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}