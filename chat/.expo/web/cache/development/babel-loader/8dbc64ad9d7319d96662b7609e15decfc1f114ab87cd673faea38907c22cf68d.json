{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _SharedElementCompatRouteProxy = require(\"./SharedElementCompatRouteProxy\");\nvar _utils = require(\"./utils\");\nvar _excluded = [\"id\", \"otherId\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction getSharedElements(scene, otherScene, showing) {\n  var sharedElements = scene.getSharedElements();\n  if (!sharedElements) return null;\n  return (0, _utils.normalizeSharedElementsConfig)(sharedElements(new _SharedElementCompatRouteProxy.SharedElementCompatRouteProxy(scene.route), new _SharedElementCompatRouteProxy.SharedElementCompatRouteProxy(otherScene.route), showing));\n}\nvar NO_SHARED_ELEMENTS = [];\nvar SharedElementRendererData = function () {\n  function SharedElementRendererData() {\n    (0, _classCallCheck2.default)(this, SharedElementRendererData);\n    this.scenes = [];\n    this.updateSubscribers = new Set();\n    this.sharedElements = null;\n    this.isShowing = true;\n    this.route = null;\n    this.prevRoute = null;\n    this.scene = null;\n    this.prevScene = null;\n    this.isTransitionStarted = false;\n    this.isTransitionClosing = false;\n    this.transitionNavigatorId = \"\";\n    this.transitionNestingDepth = -1;\n    this.debugRefCount = 0;\n  }\n  (0, _createClass2.default)(SharedElementRendererData, [{\n    key: \"startTransition\",\n    value: function startTransition(closing, navigatorId, nestingDepth) {\n      if (this.debug) console.debug(\"[\" + navigatorId + \"]startTransition, closing: \" + closing + \", nestingDepth: \" + nestingDepth);\n      if (!this.isTransitionStarted || this.route) {\n        this.prevRoute = this.route;\n        this.route = null;\n        this.routeAnimValue = null;\n        if (this.isTransitionStarted) {\n          var scene = this.getScene(this.prevRoute);\n          if (scene) {\n            this.routeAnimValue = scene.getAnimValue(true);\n          }\n        }\n        this.isTransitionStarted = true;\n        this.isTransitionClosing = closing;\n        this.transitionNavigatorId = navigatorId;\n        this.transitionNestingDepth = nestingDepth;\n      } else {\n        if (nestingDepth < this.transitionNestingDepth) {\n          this.transitionNavigatorId = navigatorId;\n          this.transitionNestingDepth = nestingDepth;\n        }\n      }\n    }\n  }, {\n    key: \"endTransition\",\n    value: function endTransition(closing, navigatorId, nestingDepth) {\n      if (this.debug) console.debug(\"[\" + navigatorId + \"]endTransition, closing: \" + closing + \", nestingDepth: \" + nestingDepth);\n      if (!this.isTransitionStarted || this.transitionNavigatorId !== navigatorId) {\n        return;\n      }\n      this.isTransitionStarted = false;\n      if (this.prevRoute != null) {\n        this.prevRoute = null;\n        this.routeAnimValue = null;\n        this.updateSceneListeners();\n        this.updateSharedElements();\n      }\n    }\n  }, {\n    key: \"updateSceneState\",\n    value: function updateSceneState(scene, eventType) {\n      switch (eventType) {\n        case \"willFocus\":\n          return this.willFocusScene(scene);\n        case \"didFocus\":\n          return this.didFocusScene(scene);\n      }\n    }\n  }, {\n    key: \"addDebugRef\",\n    value: function addDebugRef() {\n      return ++this.debugRefCount;\n    }\n  }, {\n    key: \"releaseDebugRef\",\n    value: function releaseDebugRef() {\n      return --this.debugRefCount;\n    }\n  }, {\n    key: \"debug\",\n    get: function get() {\n      return this.debugRefCount > 0;\n    }\n  }, {\n    key: \"willFocusScene\",\n    value: function willFocusScene(scene) {\n      if (this.debug) console.debug(\"[\" + scene.navigatorId + \"]willFocus, scene: \\\"\" + scene.name + \"\\\", depth: \" + scene.nestingDepth + \", closing: \" + this.isTransitionClosing);\n      this.registerScene(scene);\n      if (!this.isTransitionStarted) return;\n      if (this.prevRoute) {\n        var routeScene = this.isTransitionClosing ? this.getScene(this.prevRoute) : scene;\n        if ((routeScene == null ? void 0 : routeScene.navigatorId) === this.transitionNavigatorId) {\n          this.routeAnimValue = routeScene == null ? void 0 : routeScene.getAnimValue(this.isTransitionClosing);\n        }\n      }\n      if (!this.route) {\n        this.route = scene.route;\n      } else {\n        var _routeScene = this.getScene(this.route);\n        if (_routeScene && _routeScene.nestingDepth <= scene.nestingDepth) {\n          this.route = scene.route;\n        }\n      }\n      if (this.prevRoute && this.route && this.routeAnimValue) {\n        this.updateSceneListeners();\n        this.updateSharedElements();\n      }\n    }\n  }, {\n    key: \"didFocusScene\",\n    value: function didFocusScene(scene) {\n      if (this.debug) console.debug(\"[\" + scene.navigatorId + \"]didFocus, scene: \\\"\" + scene.name + \"\\\", depth: \" + scene.nestingDepth);\n      if (!this.route || this.prevRoute) {\n        this.route = scene.route;\n      } else {\n        var routeScene = this.getScene(this.route);\n        if (routeScene && routeScene.nestingDepth <= scene.nestingDepth) {\n          this.route = scene.route;\n        }\n      }\n      this.registerScene(scene);\n    }\n  }, {\n    key: \"registerScene\",\n    value: function registerScene(scene) {\n      this.scenes.push({\n        scene: scene,\n        subscription: null\n      });\n      if (this.scenes.length > 10) {\n        var subscription = this.scenes[0].subscription;\n        this.scenes.splice(0, 1);\n        subscription == null ? void 0 : subscription();\n      }\n      this.updateSceneListeners();\n    }\n  }, {\n    key: \"updateSceneListeners\",\n    value: function updateSceneListeners() {\n      var _this = this;\n      this.scenes.forEach(function (sceneRoute) {\n        var scene = sceneRoute.scene,\n          subscription = sceneRoute.subscription;\n        var isActive = _this.route && _this.route.key === scene.route.key || _this.prevRoute && _this.prevRoute.key === scene.route.key;\n        if (isActive && !subscription) {\n          sceneRoute.subscription = scene.addUpdateListener(function () {\n            _this.emitUpdateEvent();\n          });\n        } else if (!isActive && subscription) {\n          sceneRoute.subscription = null;\n          subscription();\n        }\n      });\n    }\n  }, {\n    key: \"getScene\",\n    value: function getScene(route) {\n      var sceneRoute = route ? this.scenes.find(function (sc) {\n        return sc.scene.route.key === route.key;\n      }) : undefined;\n      return sceneRoute ? sceneRoute.scene : null;\n    }\n  }, {\n    key: \"updateSharedElements\",\n    value: function updateSharedElements() {\n      var route = this.route,\n        prevRoute = this.prevRoute,\n        routeAnimValue = this.routeAnimValue;\n      var scene = this.getScene(route);\n      var prevScene = this.getScene(prevRoute);\n      var sceneAnimValue = routeAnimValue;\n      if (scene === this.scene && prevScene === this.prevScene && sceneAnimValue === this.sceneAnimValue) return;\n      this.scene = scene;\n      this.prevScene = prevScene;\n      this.sceneAnimValue = sceneAnimValue;\n      var sharedElements = null;\n      var isShowing = true;\n      if (sceneAnimValue && scene && prevScene && route && prevRoute) {\n        sharedElements = getSharedElements(scene, prevScene, true);\n        if (!sharedElements) {\n          isShowing = false;\n          sharedElements = getSharedElements(prevScene, scene, false);\n        }\n      }\n      if (this.sharedElements !== sharedElements) {\n        if (this.debug) {\n          if (sharedElements) {\n            console.debug(\"Transition start: \\\"\" + (prevScene == null ? void 0 : prevScene.name) + \"\\\" -> \\\"\" + (scene == null ? void 0 : scene.name) + \"\\\", elements: \" + JSON.stringify(sharedElements, undefined, 2));\n          } else {\n            console.debug(\"Transition end: \\\"\" + (scene == null ? void 0 : scene.name) + \"\\\"\");\n          }\n        }\n        this.sharedElements = sharedElements;\n        this.isShowing = isShowing;\n        this.emitUpdateEvent();\n      }\n    }\n  }, {\n    key: \"addUpdateListener\",\n    value: function addUpdateListener(handler) {\n      var _this2 = this;\n      this.updateSubscribers.add(handler);\n      return function () {\n        return _this2.updateSubscribers.delete(handler);\n      };\n    }\n  }, {\n    key: \"emitUpdateEvent\",\n    value: function emitUpdateEvent() {\n      this.updateSubscribers.forEach(function (handler) {\n        return handler();\n      });\n    }\n  }, {\n    key: \"getTransitions\",\n    value: function getTransitions() {\n      var sharedElements = this.sharedElements,\n        prevScene = this.prevScene,\n        scene = this.scene,\n        isShowing = this.isShowing,\n        sceneAnimValue = this.sceneAnimValue;\n      if (!sharedElements || !scene || !prevScene) return NO_SHARED_ELEMENTS;\n      return sharedElements.map(function (_ref) {\n        var id = _ref.id,\n          otherId = _ref.otherId,\n          other = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n        var startId = isShowing ? otherId || id : id;\n        var endId = isShowing ? id : otherId || id;\n        return _objectSpread({\n          key: scene.route.key,\n          position: sceneAnimValue,\n          start: {\n            ancestor: (prevScene ? prevScene.getAncestor() : undefined) || null,\n            node: (prevScene ? prevScene.getNode(startId) : undefined) || null\n          },\n          end: {\n            ancestor: (scene ? scene.getAncestor() : undefined) || null,\n            node: (scene ? scene.getNode(endId) : undefined) || null\n          }\n        }, other);\n      });\n    }\n  }, {\n    key: \"nestingDepth\",\n    get: function get() {\n      return 0;\n    }\n  }]);\n  return SharedElementRendererData;\n}();\nexports.default = SharedElementRendererData;","map":{"version":3,"names":["_SharedElementCompatRouteProxy","require","_utils","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","getSharedElements","scene","otherScene","showing","sharedElements","normalizeSharedElementsConfig","SharedElementCompatRouteProxy","route","NO_SHARED_ELEMENTS","SharedElementRendererData","_classCallCheck2","scenes","updateSubscribers","Set","isShowing","prevRoute","prevScene","isTransitionStarted","isTransitionClosing","transitionNavigatorId","transitionNestingDepth","debugRefCount","_createClass2","value","startTransition","closing","navigatorId","nestingDepth","debug","console","routeAnimValue","getScene","getAnimValue","endTransition","updateSceneListeners","updateSharedElements","updateSceneState","eventType","willFocusScene","didFocusScene","addDebugRef","releaseDebugRef","get","name","registerScene","routeScene","subscription","splice","_this","sceneRoute","isActive","addUpdateListener","emitUpdateEvent","find","sc","undefined","sceneAnimValue","JSON","stringify","handler","_this2","add","delete","getTransitions","map","_ref","id","otherId","other","_objectWithoutProperties2","startId","endId","position","start","ancestor","getAncestor","node","getNode","end","exports"],"sources":["C:\\xampp\\htdocs\\Kush\\whatsapp_facebook_messenger\\chat\\node_modules\\react-navigation-shared-element\\src\\SharedElementRendererData.ts"],"sourcesContent":["import { SharedElementCompatRouteProxy } from \"./SharedElementCompatRouteProxy\";\nimport SharedElementSceneData, {\n  SharedElementSceneEventType,\n} from \"./SharedElementSceneData\";\nimport {\n  SharedElementEventSubscription,\n  SharedElementsStrictConfig,\n  SharedElementAnimatedValue,\n  SharedElementTransitionProps,\n  SharedElementRoute,\n} from \"./types\";\nimport { normalizeSharedElementsConfig } from \"./utils\";\n\nexport type SharedElementRendererUpdateHandler = () => any;\n\nexport interface ISharedElementRendererData {\n  startTransition(\n    closing: boolean,\n    navigatorId: string,\n    nestingDepth: number\n  ): void;\n  endTransition(\n    closing: boolean,\n    navigatorId: string,\n    nestingDepth: number\n  ): void;\n  updateSceneState(\n    scene: SharedElementSceneData,\n    eventType: SharedElementSceneEventType\n  ): void;\n  readonly nestingDepth: number;\n  addDebugRef(): number;\n  releaseDebugRef(): number;\n}\n\nfunction getSharedElements(\n  scene: SharedElementSceneData,\n  otherScene: SharedElementSceneData,\n  showing: boolean\n): SharedElementsStrictConfig | null {\n  const sharedElements = scene.getSharedElements();\n  if (!sharedElements) return null;\n  return normalizeSharedElementsConfig(\n    sharedElements(\n      new SharedElementCompatRouteProxy(scene.route),\n      new SharedElementCompatRouteProxy(otherScene.route),\n      showing\n    )\n  );\n}\n\nconst NO_SHARED_ELEMENTS: any[] = [];\n\ntype SceneRoute = {\n  scene: SharedElementSceneData;\n  subscription: SharedElementEventSubscription | null;\n};\n\n/**\n * TODO\n * - [ ] Not all lifecycle events not emitted by stack when using gestures (close modal)\n */\n\nexport default class SharedElementRendererData\n  implements ISharedElementRendererData {\n  private scenes: SceneRoute[] = [];\n  private updateSubscribers = new Set<SharedElementRendererUpdateHandler>();\n  private sharedElements: SharedElementsStrictConfig | null = null;\n  private isShowing: boolean = true;\n\n  private route: SharedElementRoute | null = null;\n  private prevRoute: SharedElementRoute | null = null;\n  private routeAnimValue: SharedElementAnimatedValue;\n\n  private scene: SharedElementSceneData | null = null;\n  private prevScene: SharedElementSceneData | null = null;\n  private sceneAnimValue: SharedElementAnimatedValue;\n\n  private isTransitionStarted: boolean = false;\n  private isTransitionClosing: boolean = false;\n  private transitionNavigatorId: string = \"\";\n  private transitionNestingDepth: number = -1;\n\n  public debugRefCount: number = 0;\n\n  startTransition(closing: boolean, navigatorId: string, nestingDepth: number) {\n    if (this.debug)\n      console.debug(\n        `[${navigatorId}]startTransition, closing: ${closing}, nestingDepth: ${nestingDepth}`\n      );\n\n    if (!this.isTransitionStarted || this.route) {\n      this.prevRoute = this.route;\n      this.route = null;\n      this.routeAnimValue = null;\n\n      // When a transition wasn't completely fully, but a new transition\n      // has already started, then the `willBlur` event is not called.\n      // For this particular case, we capture the animation-value of the\n      // last (previous) scene that is now being hidden.\n      if (this.isTransitionStarted) {\n        const scene = this.getScene(this.prevRoute);\n        if (scene) {\n          this.routeAnimValue = scene.getAnimValue(true);\n        }\n      }\n\n      this.isTransitionStarted = true;\n      this.isTransitionClosing = closing;\n      this.transitionNavigatorId = navigatorId;\n      this.transitionNestingDepth = nestingDepth;\n    } else {\n      // When navigators are nested, `startTransition` may be called multiple\n      // times. In such as case, we want to use the most shallow navigator,\n      // as that is the one doing the transition.\n      if (nestingDepth < this.transitionNestingDepth) {\n        this.transitionNavigatorId = navigatorId;\n        this.transitionNestingDepth = nestingDepth;\n      }\n    }\n  }\n\n  endTransition(closing: boolean, navigatorId: string, nestingDepth: number) {\n    if (this.debug)\n      console.debug(\n        `[${navigatorId}]endTransition, closing: ${closing}, nestingDepth: ${nestingDepth}`\n      );\n\n    if (\n      !this.isTransitionStarted ||\n      this.transitionNavigatorId !== navigatorId\n    ) {\n      return;\n    }\n\n    this.isTransitionStarted = false;\n\n    if (this.prevRoute != null) {\n      this.prevRoute = null;\n      this.routeAnimValue = null;\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }\n\n  updateSceneState(\n    scene: SharedElementSceneData,\n    eventType: SharedElementSceneEventType\n  ): void {\n    switch (eventType) {\n      case \"willFocus\":\n        return this.willFocusScene(scene);\n      case \"didFocus\":\n        return this.didFocusScene(scene);\n      /*case \"willBlur\":\n        return this.willBlurScene(scene);*/\n    }\n  }\n\n  addDebugRef(): number {\n    return ++this.debugRefCount;\n  }\n\n  releaseDebugRef(): number {\n    return --this.debugRefCount;\n  }\n\n  get debug() {\n    return this.debugRefCount > 0;\n  }\n\n  willFocusScene(scene: SharedElementSceneData): void {\n    if (this.debug)\n      console.debug(\n        `[${scene.navigatorId}]willFocus, scene: \"${scene.name}\", depth: ${scene.nestingDepth}, closing: ${this.isTransitionClosing}`\n      );\n    this.registerScene(scene);\n\n    // Wait for a transition start, before starting any animations\n    if (!this.isTransitionStarted) return;\n\n    // Use the animation value from the navigator that\n    // started the transition\n    if (this.prevRoute) {\n      const routeScene = this.isTransitionClosing\n        ? this.getScene(this.prevRoute)\n        : scene;\n      if (routeScene?.navigatorId === this.transitionNavigatorId) {\n        this.routeAnimValue = routeScene?.getAnimValue(\n          this.isTransitionClosing\n        );\n      }\n    }\n\n    // In case of nested navigators, multiple scenes will become\n    // activated. Make sure to use the scene that is nested most deeply,\n    // as this will be the one visible to the user\n    if (!this.route) {\n      this.route = scene.route;\n    } else {\n      const routeScene = this.getScene(this.route);\n      if (routeScene && routeScene.nestingDepth <= scene.nestingDepth) {\n        this.route = scene.route;\n      }\n    }\n\n    // Update transition\n    if (this.prevRoute && this.route && this.routeAnimValue) {\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }\n\n  didFocusScene(scene: SharedElementSceneData): void {\n    if (this.debug)\n      console.debug(\n        `[${scene.navigatorId}]didFocus, scene: \"${scene.name}\", depth: ${scene.nestingDepth}`\n      );\n\n    if (!this.route || this.prevRoute) {\n      this.route = scene.route;\n    } else {\n      const routeScene = this.getScene(this.route);\n      if (routeScene && routeScene.nestingDepth <= scene.nestingDepth) {\n        this.route = scene.route;\n      }\n    }\n    this.registerScene(scene);\n  }\n\n  /*willBlurScene(scene: SharedElementSceneData): void {\n    if (this.debug)\n      console.debug(\n        `[${scene.navigatorId}]willBlur, scene: \"${scene.name}\", depth: ${scene.nestingDepth}`\n      );\n\n    // Wait for a transition start, before starting any animations\n    if (!this.isTransitionStarted) return;\n\n    // Use the animation value from the navigator that\n    // started the transition\n    if (\n      this.isTransitionClosing &&\n      scene.navigatorId === this.transitionNavigatorId &&\n      !this.routeAnimValue\n    ) {\n      this.routeAnimValue = scene.getAnimValue(this.isTransitionClosing);\n    }\n\n    // Update transition\n    if (this.prevRoute && this.route && this.routeAnimValue) {\n      this.updateSceneListeners();\n      this.updateSharedElements();\n    }\n  }*/\n\n  private registerScene(scene: SharedElementSceneData) {\n    this.scenes.push({\n      scene,\n      subscription: null,\n    });\n    if (this.scenes.length > 10) {\n      const { subscription } = this.scenes[0];\n      this.scenes.splice(0, 1);\n      subscription?.();\n    }\n    this.updateSceneListeners();\n  }\n\n  private updateSceneListeners() {\n    this.scenes.forEach((sceneRoute) => {\n      const { scene, subscription } = sceneRoute;\n      const isActive =\n        (this.route && this.route.key === scene.route.key) ||\n        (this.prevRoute && this.prevRoute.key === scene.route.key);\n      if (isActive && !subscription) {\n        sceneRoute.subscription = scene.addUpdateListener(() => {\n          // TODO: optimize?\n          this.emitUpdateEvent();\n        });\n      } else if (!isActive && subscription) {\n        sceneRoute.subscription = null;\n        subscription();\n      }\n    });\n  }\n\n  private getScene(\n    route: SharedElementRoute | null\n  ): SharedElementSceneData | null {\n    const sceneRoute = route\n      ? this.scenes.find((sc) => sc.scene.route.key === route.key)\n      : undefined;\n    return sceneRoute ? sceneRoute.scene : null;\n  }\n\n  private updateSharedElements() {\n    const { route, prevRoute, routeAnimValue } = this;\n    const scene = this.getScene(route);\n    const prevScene = this.getScene(prevRoute);\n    const sceneAnimValue = routeAnimValue;\n\n    // Update current scene & previous scene\n    if (\n      scene === this.scene &&\n      prevScene === this.prevScene &&\n      sceneAnimValue === this.sceneAnimValue\n    )\n      return;\n    this.scene = scene;\n    this.prevScene = prevScene;\n    this.sceneAnimValue = sceneAnimValue;\n\n    // Update shared elements\n    let sharedElements: SharedElementsStrictConfig | null = null;\n    let isShowing = true;\n    if (sceneAnimValue && scene && prevScene && route && prevRoute) {\n      sharedElements = getSharedElements(scene, prevScene, true);\n      if (!sharedElements) {\n        isShowing = false;\n        sharedElements = getSharedElements(prevScene, scene, false);\n      }\n    }\n    if (this.sharedElements !== sharedElements) {\n      if (this.debug) {\n        if (sharedElements) {\n          console.debug(\n            `Transition start: \"${prevScene?.name}\" -> \"${\n              scene?.name\n            }\", elements: ${JSON.stringify(sharedElements, undefined, 2)}`\n          );\n        } else {\n          console.debug(`Transition end: \"${scene?.name}\"`);\n        }\n      }\n      this.sharedElements = sharedElements;\n      this.isShowing = isShowing;\n      /*console.log(\n        'updateSharedElements: ',\n        sharedElements,\n        ' ,isShowing: ',\n        isShowing,\n        ', animValue: ',\n        animValue\n      );*/\n      this.emitUpdateEvent();\n    }\n  }\n\n  addUpdateListener(\n    handler: SharedElementRendererUpdateHandler\n  ): SharedElementEventSubscription {\n    this.updateSubscribers.add(handler);\n    return () => this.updateSubscribers.delete(handler);\n  }\n\n  private emitUpdateEvent(): void {\n    this.updateSubscribers.forEach((handler) => handler());\n  }\n\n  getTransitions(): SharedElementTransitionProps[] {\n    const {\n      sharedElements,\n      prevScene,\n      scene,\n      isShowing,\n      sceneAnimValue,\n    } = this;\n\n    if (!sharedElements || !scene || !prevScene) return NO_SHARED_ELEMENTS;\n    return sharedElements.map(({ id, otherId, ...other }) => {\n      const startId = isShowing ? otherId || id : id;\n      const endId = isShowing ? id : otherId || id;\n      return {\n        key: scene.route.key,\n        position: sceneAnimValue,\n        start: {\n          ancestor: (prevScene ? prevScene.getAncestor() : undefined) || null,\n          node: (prevScene ? prevScene.getNode(startId) : undefined) || null,\n        },\n        end: {\n          ancestor: (scene ? scene.getAncestor() : undefined) || null,\n          node: (scene ? scene.getNode(endId) : undefined) || null,\n        },\n        ...other,\n      };\n    });\n  }\n\n  get nestingDepth(): number {\n    return 0;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}