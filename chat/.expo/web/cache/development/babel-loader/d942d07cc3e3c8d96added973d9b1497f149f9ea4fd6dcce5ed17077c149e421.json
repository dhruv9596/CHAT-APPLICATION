{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _emitter = _interopRequireDefault(require(\"webpack/hot/emitter.js\"));\nvar _log = require(\"./log.js\");\nfunction reloadApp(_ref, status) {\n  var hot = _ref.hot,\n    liveReload = _ref.liveReload;\n  if (status.isUnloading) {\n    return;\n  }\n  var currentHash = status.currentHash,\n    previousHash = status.previousHash;\n  var isInitial = currentHash.indexOf(previousHash) >= 0;\n  if (isInitial) {\n    return;\n  }\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    _log.log.info(\"App updated. Reloading...\");\n    rootWindow.location.reload();\n  }\n  var search = self.location.search.toLowerCase();\n  var allowToHot = search.indexOf(\"webpack-dev-server-hot=false\") === -1;\n  var allowToLiveReload = search.indexOf(\"webpack-dev-server-live-reload=false\") === -1;\n  if (hot && allowToHot) {\n    _log.log.info(\"App hot update...\");\n    _emitter.default.emit(\"webpackHotUpdate\", status.currentHash);\n    if (typeof self !== \"undefined\" && self.window) {\n      self.postMessage(\"webpackHotUpdate\".concat(status.currentHash), \"*\");\n    }\n  } else if (liveReload && allowToLiveReload) {\n    var rootWindow = self;\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== \"about:\") {\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n        if (rootWindow.parent === rootWindow) {\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n}\nvar _default = reloadApp;\nexports.default = _default;","map":{"version":3,"names":["_emitter","_interopRequireDefault","require","_log","reloadApp","_ref","status","hot","liveReload","isUnloading","currentHash","previousHash","isInitial","indexOf","applyReload","rootWindow","intervalId","clearInterval","log","info","location","reload","search","self","toLowerCase","allowToHot","allowToLiveReload","hotEmitter","emit","window","postMessage","concat","setInterval","protocol","parent","_default","exports","default"],"sources":["C:/Users/mangu/AppData/Roaming/npm/node_modules/expo-cli/node_modules/webpack-dev-server/client/utils/reloadApp.js"],"sourcesContent":["import hotEmitter from \"webpack/hot/emitter.js\";\nimport { log } from \"./log.js\";\n/** @typedef {import(\"../index\").Options} Options\n/** @typedef {import(\"../index\").Status} Status\n\n/**\n * @param {Options} options\n * @param {Status} status\n */\n\nfunction reloadApp(_ref, status) {\n  var hot = _ref.hot,\n      liveReload = _ref.liveReload;\n\n  if (status.isUnloading) {\n    return;\n  }\n\n  var currentHash = status.currentHash,\n      previousHash = status.previousHash;\n  var isInitial = currentHash.indexOf(\n  /** @type {string} */\n  previousHash) >= 0;\n\n  if (isInitial) {\n    return;\n  }\n  /**\n   * @param {Window} rootWindow\n   * @param {number} intervalId\n   */\n\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info(\"App updated. Reloading...\");\n    rootWindow.location.reload();\n  }\n\n  var search = self.location.search.toLowerCase();\n  var allowToHot = search.indexOf(\"webpack-dev-server-hot=false\") === -1;\n  var allowToLiveReload = search.indexOf(\"webpack-dev-server-live-reload=false\") === -1;\n\n  if (hot && allowToHot) {\n    log.info(\"App hot update...\");\n    hotEmitter.emit(\"webpackHotUpdate\", status.currentHash);\n\n    if (typeof self !== \"undefined\" && self.window) {\n      // broadcast update to window\n      self.postMessage(\"webpackHotUpdate\".concat(status.currentHash), \"*\");\n    }\n  } // allow refreshing the page only if liveReload isn't disabled\n  else if (liveReload && allowToLiveReload) {\n    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)\n\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== \"about:\") {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n}\n\nexport default reloadApp;"],"mappings":";;;;;AAAA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,IAAA,GAAAD,OAAA;AASA,SAASE,SAASA,CAACC,IAAI,EAAEC,MAAM,EAAE;EAC/B,IAAIC,GAAG,GAAGF,IAAI,CAACE,GAAG;IACdC,UAAU,GAAGH,IAAI,CAACG,UAAU;EAEhC,IAAIF,MAAM,CAACG,WAAW,EAAE;IACtB;EACF;EAEA,IAAIC,WAAW,GAAGJ,MAAM,CAACI,WAAW;IAChCC,YAAY,GAAGL,MAAM,CAACK,YAAY;EACtC,IAAIC,SAAS,GAAGF,WAAW,CAACG,OAAO,CAEnCF,YAAY,CAAC,IAAI,CAAC;EAElB,IAAIC,SAAS,EAAE;IACb;EACF;EAOA,SAASE,WAAWA,CAACC,UAAU,EAAEC,UAAU,EAAE;IAC3CC,aAAa,CAACD,UAAU,CAAC;IACzBE,QAAG,CAACC,IAAI,CAAC,2BAA2B,CAAC;IACrCJ,UAAU,CAACK,QAAQ,CAACC,MAAM,EAAE;EAC9B;EAEA,IAAIC,MAAM,GAAGC,IAAI,CAACH,QAAQ,CAACE,MAAM,CAACE,WAAW,EAAE;EAC/C,IAAIC,UAAU,GAAGH,MAAM,CAACT,OAAO,CAAC,8BAA8B,CAAC,KAAK,CAAC,CAAC;EACtE,IAAIa,iBAAiB,GAAGJ,MAAM,CAACT,OAAO,CAAC,sCAAsC,CAAC,KAAK,CAAC,CAAC;EAErF,IAAIN,GAAG,IAAIkB,UAAU,EAAE;IACrBP,QAAG,CAACC,IAAI,CAAC,mBAAmB,CAAC;IAC7BQ,gBAAU,CAACC,IAAI,CAAC,kBAAkB,EAAEtB,MAAM,CAACI,WAAW,CAAC;IAEvD,IAAI,OAAOa,IAAI,KAAK,WAAW,IAAIA,IAAI,CAACM,MAAM,EAAE;MAE9CN,IAAI,CAACO,WAAW,CAAC,kBAAkB,CAACC,MAAM,CAACzB,MAAM,CAACI,WAAW,CAAC,EAAE,GAAG,CAAC;IACtE;EACF,CAAC,MACI,IAAIF,UAAU,IAAIkB,iBAAiB,EAAE;IACxC,IAAIX,UAAU,GAAGQ,IAAI;IAErB,IAAIP,UAAU,GAAGO,IAAI,CAACS,WAAW,CAAC,YAAY;MAC5C,IAAIjB,UAAU,CAACK,QAAQ,CAACa,QAAQ,KAAK,QAAQ,EAAE;QAE7CnB,WAAW,CAACC,UAAU,EAAEC,UAAU,CAAC;MACrC,CAAC,MAAM;QACLD,UAAU,GAAGA,UAAU,CAACmB,MAAM;QAE9B,IAAInB,UAAU,CAACmB,MAAM,KAAKnB,UAAU,EAAE;UAEpCD,WAAW,CAACC,UAAU,EAAEC,UAAU,CAAC;QACrC;MACF;IACF,CAAC,CAAC;EACJ;AACF;AAAC,IAAAmB,QAAA,GAEc/B,SAAS;AAAAgC,OAAA,CAAAC,OAAA,GAAAF,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}